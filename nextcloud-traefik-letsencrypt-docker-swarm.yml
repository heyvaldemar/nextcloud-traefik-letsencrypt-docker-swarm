# Nextcloud with Let's Encrypt in a Docker Swarm

# Install Docker Swarm by following my guide: https://www.heyvaldemar.com/install-docker-swarm-on-ubuntu-server/

# Configure Traefik and create secrets for storing the passwords on the Docker Swarm manager node before applying the configuration.
# Traefik configuration: https://github.com/heyValdemar/traefik-letsencrypt-docker-swarm

# Create a secret for storing the password for Nextcloud database using the command:
# printf "YourPassword" | docker secret create nextcloud-postgres-password -

# Create a secret for storing the password for Nextcloud admin using the command:
# printf "YourPassword" | docker secret create nextcloud-admin-password -

# Clear passwords from bash history using the command:
# history -c && history -w

# Run nextcloud-restore-application-data.sh on the Docker Swarm worker node where the container for backups is running to restore application data if needed.
# Run nextcloud-restore-database.sh on the Docker Swarm node where the container for backups is running to restore database if needed.
# Run docker stack ps nextcloud | grep nextcloud_backups | awk 'NR > 0 {print $4}' on the Docker Swarm manager node to find on which node container for backups is running.

# Deploy Nextcloud in a Docker Swarm using the command:
# docker stack deploy -c nextcloud-traefik-letsencrypt-docker-swarm.yml nextcloud

# # Background Jobs Using Cron
# To ensure your Nextcloud instance operates efficiently, it's important to use the "Cron" method to execute background jobs. A dedicated Docker container has already been set up in your environment to handle these tasks.

# ## Steps to Enable Cron:
# 1. **Log in to Nextcloud as an Administrator.**
# 2. Go to **Administration settings** (click on your user profile in the top right corner and select "Administration settings").
# 3. In the **Administration** section on the left sidebar, select **Basic settings**.
# 4. Scroll down to the **Background jobs** section.
# 5. Select the **"Cron (Recommended)"** option.

# ## Why Use Cron?
# The "Cron" method ensures that background tasks, such as file indexing, notifications, and cleanup operations,
# run at regular intervals independently of user activity. This method is more reliable and efficient than AJAX or Webcron,
# particularly for larger or more active instances, as it does not depend on users accessing the site to trigger these tasks.
# With the dedicated container in your setup, this method keeps your Nextcloud instance responsive
# and in good healthby runningthese jobs consistently.

# # Fixing Database Index Issues
# Your Nextcloud database might be missing some indexes. This situation can occur because adding indexes to large tables can take considerable time, so they are not added automatically. Running `occ db:add-missing-indices` manually allows these indexes to be added while the instance continues running. Adding these indexes can significantly speed up queries on tables like `filecache` and `systemtag_object_mapping`, which might be missing indexes such as `fs_storage_path_prefix` and `systag_by_objectid`.

# List all running containers to find the one running Nextcloud:
# `docker ps`

# Run the command below, replacing `nextcloud-container-name` with your container's name. Adjust `33` to the correct user ID if different:
# `docker exec -u 33 -it nextcloud-container-name php occ db:add-missing-indices`

# Confirm the indices were added by checking the status:
# `docker exec -u 33 -it nextcloud-container-name php occ status`

# - Operations on large databases can take time; consider scheduling during low-usage periods.
# - Always backup your database before making changes.

# Author
# Iâ€™m Vladimir Mikhalev, the Docker Captain, but my friends can call me Valdemar.
# https://www.docker.com/captains/vladimir-mikhalev/

# My website with detailed IT guides: https://www.heyvaldemar.com/
# Follow me on YouTube: https://www.youtube.com/channel/UCf85kQ0u1sYTTTyKVpxrlyQ?sub_confirmation=1
# Follow me on Twitter: https://twitter.com/heyValdemar
# Follow me on Instagram: https://www.instagram.com/heyvaldemar/
# Follow me on Threads: https://www.threads.net/@heyvaldemar
# Follow me on Mastodon: https://mastodon.social/@heyvaldemar
# Follow me on Bluesky: https://bsky.app/profile/heyvaldemar.bsky.social
# Follow me on Facebook: https://www.facebook.com/heyValdemarFB/
# Follow me on TikTok: https://www.tiktok.com/@heyvaldemar
# Follow me on LinkedIn: https://www.linkedin.com/in/heyvaldemar/
# Follow me on GitHub: https://github.com/heyvaldemar

# Communication
# Chat with IT pros on Discord: https://discord.gg/AJQGCCBcqf
# Reach me at ask@sre.gg

# Give Thanks
# Support on GitHub: https://github.com/sponsors/heyValdemar
# Support on Patreon: https://www.patreon.com/heyValdemar
# Support on BuyMeaCoffee: https://www.buymeacoffee.com/heyValdemar
# Support on Ko-fi: https://ko-fi.com/heyValdemar
# Support on PayPal: https://www.paypal.com/paypalme/heyValdemarCOM

version: '3.9'

x-default-opts:
  &default-opts
  logging:
    options:
      max-size: "10m"

networks:
  nextcloud-network:
    driver: overlay
  traefik-network:
    external: true

volumes:
  nextcloud-data:
  nextcloud-postgres:
  nextcloud-data-backups:
  nextcloud-postgres-backups:
  traefik-certificates:

secrets:
  nextcloud-postgres-password:
    external: true
  nextcloud-admin-password:
    external: true

services:
  postgres:
    <<: *default-opts
    # Image tag (replace with yours)
    image: postgres:14
    volumes:
      - nextcloud-postgres:/var/lib/postgresql/data
    environment:
      # Database name (replace with yours)
      POSTGRES_DB: nextclouddb
      # Database user (replace with yours)
      POSTGRES_USER: nextclouddbuser
      POSTGRES_PASSWORD_FILE: /run/secrets/nextcloud-postgres-password
    networks:
      - nextcloud-network
    secrets:
      - nextcloud-postgres-password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # Container resources (replace with yours)
      resources:
        limits:
          cpus: '0.55'
          memory: 1G
        reservations:
          cpus: '0.35'
          memory: 512M

  nextcloud:
    <<: *default-opts
    # Image tag (replace with yours)
    image: nextcloud:24-apache
    volumes:
      - nextcloud-data:/var/www/html
    environment:
      POSTGRES_HOST: postgres
      DB_PORT: 5432
      # Database name (replace with yours)
      POSTGRES_DB: nextclouddb
      # Database user (replace with yours)
      POSTGRES_USER: nextclouddbuser
      # Database password (replace with yours)
      POSTGRES_PASSWORD_FILE: /run/secrets/nextcloud-postgres-password
      # Nextcloud user (replace with yours)
      NEXTCLOUD_ADMIN_USER: nextcloudadmin
      # Nextcloud password (replace with yours)
      NEXTCLOUD_ADMIN_PASSWORD_FILE: /run/secrets/nextcloud-admin-password
      # Nextcloud URL (replace with yours)
      NEXTCLOUD_TRUSTED_DOMAINS: nextcloud.heyvaldemar.net
      # Nextcloud URL (replace with yours)
      OVERWRITECLIURL: https://nextcloud.heyvaldemar.net
      OVERWRITEPROTOCOL: https
      # Nextcloud URL (replace with yours)
      OVERWRITEHOST: nextcloud.heyvaldemar.net
      TRUSTED_PROXIES: 172.16.0.0/12 192.168.0.0/16 10.0.0.0/8 fc00::/7 fe80::/10 2001:db8::/32
    networks:
      - nextcloud-network
      - traefik-network
    secrets:
      - nextcloud-postgres-password
      - nextcloud-admin-password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # Container resources (replace with yours)
      resources:
        limits:
          cpus: '1.55'
          memory: 2G
        reservations:
          cpus: '0.55'
          memory: 512M
      labels:
        - "traefik.enable=true"
        # Nextcloud URL (replace with yours)
        - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.heyvaldemar.net`)"
        - "traefik.http.routers.nextcloud.service=nextcloud"
        - "traefik.http.routers.nextcloud.entrypoints=websecure"
        - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
        - "traefik.http.routers.nextcloud.tls=true"
        - "traefik.http.routers.nextcloud.tls.certresolver=letsencrypt"
        - "traefik.http.services.nextcloud.loadbalancer.passhostheader=true"
        - "traefik.http.middlewares.nextcloud-securityheaders.headers.stsSeconds=15552000"
        - "traefik.http.middlewares.nextcloud-securityheaders.headers.stsIncludeSubdomains=true"
        - "traefik.http.middlewares.nextcloud-securityheaders.headers.stsPreload=true"
        - "traefik.http.routers.nextcloud.middlewares=nextcloud-redirectregex1,nextcloud-redirectregex2,compresstraefik,nextcloud-securityheaders"
        - "traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.permanent=true"
        - "traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.regex=https?://([^/]*)/.well-known/(card|cal)dav"
        - "traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.replacement=https://$${1}/remote.php/dav/"
        - "traefik.http.middlewares.nextcloud-redirectregex2.redirectregex.permanent=true"
        - "traefik.http.middlewares.nextcloud-redirectregex2.redirectregex.regex=https?://([^/]*)(/.well-known[^#]*)"
        - "traefik.http.middlewares.nextcloud-redirectregex2.redirectregex.replacement=https://$${1}/index.php$${2}"
        - "traefik.http.middlewares.compresstraefik.compress=true"
        - "traefik.docker.network=traefik-network"
    depends_on:
      - postgres

  nextcloud-cron:
    <<: *default-opts
    # Image tag (replace with yours)
    image: nextcloud:24-apache
    entrypoint: /cron.sh
    volumes:
      - nextcloud-data:/var/www/html
    networks:
      - nextcloud-network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  backups:
    <<: *default-opts
    # Image tag (replace with yours)
    image: postgres:14
    # Database backups prune interval (replace with yours). Default is 7 days.
    # find /srv/nextcloud-postgres/backups -type f -mtime +7 | xargs rm -f

    # Application data backups prune interval (replace with yours). Default is 7 days.
    # find /srv/nextcloud-application-data/backups -type f -mtime +7 | xargs rm -f

    # Nextcloud backups interval (replace with yours). Default is 1 day.
    # sleep 24h

    # Run nextcloud-restore-application-data.sh on the Docker Swarm worker node where the container for backups is running to restore application data if needed.
    # Run nextcloud-restore-database.sh on the Docker Swarm node where the container for backups is running to restore database if needed.
    # Run docker stack ps nextcloud | grep nextcloud_backups | awk 'NR > 0 {print $4}' on the Docker Swarm manager node to find on which node container for backups is running.
    command: sh -c 'sleep 30m
             && while true; do
             PGPASSWORD="$$(cat $$POSTGRES_PASSWORD_FILE)"
             pg_dump
             -h postgres
             -p 5432
             -d nextclouddb
             -U nextclouddbuser | gzip > /srv/nextcloud-postgres/backups/nextcloud-postgres-backup-$$(date "+%Y-%m-%d_%H-%M").gz
             && tar -zcpf /srv/nextcloud-application-data/backups/nextcloud-application-data-backup-$$(date "+%Y-%m-%d_%H-%M").tar.gz /var/www/html
             && find /srv/nextcloud-postgres/backups -type f -mtime +7 | xargs rm -f
             && find /srv/nextcloud-application-data/backups -type f -mtime +7 | xargs rm -f;
             sleep 24h; done'
    volumes:
      - nextcloud-data:/var/www/html
      # Application data backups location
      - nextcloud-data-backups:/srv/nextcloud-application-data/backups
      # Database backups location
      - nextcloud-postgres-backups:/srv/nextcloud-postgres/backups
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/nextcloud-postgres-password
    networks:
      - nextcloud-network
    secrets:
      - nextcloud-postgres-password
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # Container resources (replace with yours)
      resources:
        limits:
          cpus: '0.55'
          memory: 1G
        reservations:
          cpus: '0.35'
          memory: 512M
    depends_on:
      - postgres
      - nextcloud
